library(argparse, quietly=TRUE, warn.conflicts=FALSE)
#	default args
if(0)
{	
	infile.dates		<- "~/Box Sync/OR_Work/Seattle/analysis_191017/phyloscanner_dated/180709_LANL_SubtypeA1_mafft_ndrm_000_ft_rerooted_KC__sampling_times_init.csv"
	infile.tree			<- "~/Box Sync/OR_Work/Seattle/analysis_191017/phyloscanner_dated/180709_LANL_SubtypeA1_mafft_ndrm_000_ft_rerooted_KC__collapsed.newick"
	infile.dates.bounds <- "~/Box Sync/OR_Work/Seattle/analysis_191017/phyloscanner_dated/180709_LANL_SubtypeA1_mafft_ndrm_000_ft_rerooted_KC__sampling_times_bounds.csv"
	outfile				<- "~/Box Sync/OR_Work/Seattle/analysis_191017/phyloscanner_dated/180709_LANL_SubtypeA1_mafft_ndrm_000_ft_rerooted_KC__collapsed_dated.newick"	
	ali.len				<- 1000
	temporalConstraints <- TRUE
	strictClock			<- FALSE
	root				<- NA
	omega0				<- NA	
	return.rda			<- FALSE
	verbose				<- 1
}
#	read args from command line
arg_parser			<- ArgumentParser(description="Rscript to run TreeDater.")
arg_parser$add_argument("-i", "--infile.dates", action="store", help="Input dates file in csv format with two columns TAXA and DATES that contains all or some dates for the taxa in the tree.")
arg_parser$add_argument("-ib", "--estimateSampleTimes", action="store", help="Input dates file in csv format with three columns TAXA, lower, upper that contains all or some bounds on the dates for the taxa in the tree.")
arg_parser$add_argument("-t", "--infile.tree", action="store", help="Input tree file with branches in subst site.")
arg_parser$add_argument("-o", "--outfile", action="store", help="Outfile basename for TreeDater output.")
arg_parser$add_argument("-r", "--root", action="store", help="Name of root if infile.tree is to be rooted.")
arg_parser$add_argument("-a", "--ali.len", default='1300', action="store", help="Number of alignment positions.")
arg_parser$add_argument("-m", "--omega0", default='NA', action="store", help="Initial mean substitution rate.")
arg_parser$add_argument("-tc", "--temporalConstraints", default=TRUE, action="store", help="If TRUE, will enforce the condition that an ancestor node in the phylogeny occurs before all progeny. Equivalently, this will preclude negative branch lengths. Note that execution is faster if this option is FALSE.")
arg_parser$add_argument("-sc", "--strictClock", default=FALSE, action="store", help="If TRUE, will fit a Poisson evolutionary model without rate variation..")
arg_parser$add_argument("-rda", "--return.rda", default=FALSE, action="store", help="If TRUE, return tree in rda format.")

args <- arg_parser$parse_args()
infile.dates <- args$infile.dates
infile.tree <- args$infile.tree
infile.dates.bounds <- args$infile.dates.bounds
outfile <- args$outfile
root <- args$root
ali.len <- as.numeric(args$ali.len)
omega0 <- as.numeric(args$omega0)
temporalConstraints <- as.logical(args$temporalConstraints)
strictClock <- as.logical(args$strictClock)
return.rda <- as.logical(args$return.rda)

stopifnot(	!is.null(infile.dates), 
			!is.null(infile.tree), 
			!is.null(outfile), 
			!is.null(ali.len))	
#
#	start script
#
require(ape)
library(treedater, quietly=TRUE, warn.conflicts=FALSE)
require(phytools)
require(data.table)
require(big.phylo)

#	read files
ph			<- read.tree(infile.tree)
ph.dates	<- as.data.table(read.csv(infile.dates, stringsAsFactors=FALSE))
setnames(ph.dates, 1, 'TAXA')
setnames(ph.dates, 2, 'DATE')
if(!is.null(infile.dates.bounds))
{
	ph.dates.bounds <- read.csv(infile.dates.bounds, stringsAsFactors=FALSE)
	stopifnot( c('lower','upper') %in% colnames(ph.dates.bounds))
	tmp <- setdiff(colnames(ph.dates.bounds),c('lower','upper'))
	stopifnot( length(tmp)==1 )
	colnames(ph.dates.bounds) <- gsub(tmp, 'TAXA', colnames(ph.dates.bounds))
	ph.dates.bounds <- as.data.table(ph.dates.bounds)
	stopifnot(setequal(ph.dates$TAXA, ph.dates.bounds$TAXA))
}
	
#	root if desired
if(!is.null(root) & !any(is.na(root)))
{
	cat('\nRe-rooting tree to ', root)		
	tmp			<- which(grepl(root,ph$tip.label))
	if(length(tmp)>1)
		tmp		<- getMRCA(ph,tmp)
	ph			<- reroot(ph, tmp, ph$edge.length[which(ph$edge[,2]==tmp)])	
	ph			<- ladderize(ph)			
}	

#	get dates for tips in tree
phd <- data.table(TAXA=ph$tip.label)	#tip labels for which we need to write dates
tmp <- setdiff(phd[, TAXA], ph.dates[, TAXA])
if(length(tmp))
	cat('\nWarning: Found taxa in tree that are not in Dates file:', paste(tmp, collapse=', '))
phd <- merge(phd, ph.dates, by='TAXA', all.x=1)

#	drop taxa without a date
if( phd[, length(which(is.na(DATE)))]>0 )
{
	cat('\nDropping taxa without a Date:', phd[, length(which(is.na(DATE)))])
	ph		<- drop.tip(ph, subset(phd, is.na(DATE))[, TAXA])
	phd		<- subset(phd, !is.na(DATE))	
}
phd		<- merge(data.table(TAXA=ph$tip.label, TIP_ID=seq_along(ph$tip.label)), phd, by='TAXA')
setkey(phd, TIP_ID)

#	get sampling times bounds
if(!is.null(infile.dates.bounds))
{
	tmp <- data.table(TAXA=ph$tip.label, TIP_ID=seq_along(ph$tip.label))
	ph.dates.bounds <- merge(tmp, ph.dates.bounds, by='TAXA', all.x=1)
	setkey(ph.dates.bounds, TIP_ID)
	tmp <- ph.dates.bounds[, TAXA]
	ph.dates.bounds <- as.data.frame(subset(ph.dates.bounds, select=c(lower, upper)))
	rownames(ph.dates.bounds) <- tmp
}


#	run dater
if(is.null(infile.dates.bounds))
{
	sampling.times <- phd[, DATE]
	names(sampling.times) <- phd[, TAXA]
	ans <- dater(ph, sampling.times, ali.len, omega0=omega0, temporalConstraints=temporalConstraints, strictClock=strictClock)	
}
if(!is.null(infile.dates.bounds))
{
	sampling.times.init <- phd[, DATE]
	names(sampling.times.init) <- phd[, TAXA]	
	ans <- dater(ph, sampling.times.init, ali.len, estimateSampleTimes=ph.dates.bounds, omega0=omega0, temporalConstraints=temporalConstraints, strictClock=strictClock)	
}

#	save to output file
cat('\nWriting tree to ', outfile)
write.tree(ans, file=outfile)
if(return.rda)
{
	cat('\nSave output to ', paste(outfile,'.rda',sep=''))
	save(ans, file=paste(outfile,'.rda',sep=''))	
}
